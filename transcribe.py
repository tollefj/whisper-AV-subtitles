import os
import shutil
import subprocess

import torch
from transformers import pipeline

from util import download_video, get_args, get_subs

AUDIO_TMP = "store/audio.mp3"  # temporary audio file generated by ffmpeg

device = "cuda:0" if torch.cuda.is_available() else "cpu"
ext = (".mp4", ".mkv", ".avi")
TMP_FOLDER = "store"
OUTPUT_SRT = f"{TMP_FOLDER}/subtitles.srt"


def transcribe_audio(audio_path, model_id, output_file):
    os.makedirs(TMP_FOLDER, exist_ok=True)
    print(f"Loading model {model_id} on device {device}...")
    pipe = pipeline(
        "automatic-speech-recognition", model=model_id, chunk_length_s=30, device=device
    )
    prediction = pipe(audio_path, batch_size=8, return_timestamps=True)["chunks"]
    subs = get_subs(prediction)
    with open(output_file, "w") as f:
        f.writelines(subs)


if __name__ == "__main__":
    args = get_args()
    shutil.rmtree(TMP_FOLDER, ignore_errors=True)

    video_path = "store/video.mp4"
    if args.media_path.startswith("http"):
        download_video(args.media_path, output=video_path)
        subprocess.call(["./convert.sh", video_path])
    elif args.media_path.endswith(ext):
        subprocess.call(["./convert.sh", args.media_path])
    else:
        AUDIO_TMP = args.media_path

    transcribe_audio(AUDIO_TMP, model_id=args.model, output_file=OUTPUT_SRT)

    if args.save:
        output_file = args.save if args.save.endswith(ext) else args.save + ".mp4"
        output_file = os.path.join("output", output_file)
        print(f"Saving subtitled video to {output_file}...")

        effects = {
            # "vf": f"scale=1280:720,subtitles={OUTPUT_SRT}",
            "vf": f"subtitles={OUTPUT_SRT}",
        }
        if torch.cuda.is_available():
            cmd = f"ffmpeg -hwaccel cuvid -hwaccel_output_format cuda -i {video_path} -c:v h264_nvenc -preset slow -profile:v baseline -max_muxing_queue_size 9999 -movflags faststart -vf {effects['vf']} -c:a aac -ar 48000 -b:a 96k -maxrate 1500k -bufsize 2000k {output_file} -y"
        else:
            cmd = f"ffmpeg -i {video_path} -vf {effects['vf']} -c:a aac -ar 48000 -b:a 96k -maxrate 1500k -bufsize 2000k {output_file} -y"
        subprocess.call(cmd, shell=True)
