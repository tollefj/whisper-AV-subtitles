import argparse
import os
import subprocess
import time

import torch
from transformers import pipeline

from util import get_subs

AUDIO_TMP = "tmp/audio_tmp.mp3"  # temporary audio file generated by ffmpeg

models = {
    "en": "openai/whisper-small.en",
    "no": "NbAiLabBeta/nb-whisper-base",
}
device = "cuda:0" if torch.cuda.is_available() else "cpu"


def transcribe_audio(audio_path, model_id, output_file):
    os.makedirs("tmp", exist_ok=True)
    print(f"Loading model {model_id} on device {device}...")
    pipe = pipeline(
        "automatic-speech-recognition", model=model_id, chunk_length_s=30, device=device
    )
    prediction = pipe(audio_path, batch_size=8, return_timestamps=True)["chunks"]
    subs = get_subs(prediction)
    with open(output_file, "w") as f:
        f.writelines(subs)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Transcribe audio and generate subtitles."
    )
    parser.add_argument("media_path", help="Path to the input audio file")
    parser.add_argument(
        "--model",
        choices=["en", "no"],
        default="en",
        help="Select the language model (en or no)",
    )
    parser.add_argument(
        "--output", default="subtitles.srt", help="Path to the output subtitles file"
    )
    parser.add_argument("--save", help="Path to the output subtitled video file")

    args = parser.parse_args()
    output_srt = os.path.join(os.getcwd(), "subtitles", args.output)

    video_exts = (".mp4", ".mkv", ".avi")
    if args.media_path.endswith(video_exts):
        subprocess.call(["./convert.sh", args.media_path])
    else:
        AUDIO_TMP = args.media_path
    transcribe_audio(AUDIO_TMP, model_id=models[args.model], output_file=output_srt)

    if (
        args.media_path.endswith(video_exts)
        and args.save
        and args.save.endswith(video_exts)
    ):
        print(f"Saving subtitled video to {args.save}...")
        cmd = f"ffmpeg -i {args.media_path} -vf subtitles={output_srt} {args.save}"
        subprocess.call(cmd, shell=True)
